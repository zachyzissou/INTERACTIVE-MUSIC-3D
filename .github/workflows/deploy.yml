name: CI/CD - interactive-music-3d-unraid

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, interactive-music-3d]
    timeout-minutes: 30

    env:
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - '**/*'
              - '!docs/**'
              - '!README.md'

      - name: üîÑ Restore Next.js cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: üîß Set up Node.js
        if: steps.changes.outputs.src == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Cache npm
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: üì¶ Install dependencies
        if: steps.changes.outputs.src == 'true'
        run: npm ci

      - name: üîé Type-check, lint & build
        if: steps.changes.outputs.src == 'true'
        run: npx tsc --noEmit && npm run lint && npm run build

      - name: üõ† Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: üßπ Clean up existing containers and processes
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Cleanup Phase ==="
          # Stop and remove containers aggressively
          docker stop interactive-music-web || true
          docker rm -f interactive-music-web || true
          
          # Remove all containers using the image
          docker ps -a --filter "ancestor=interactive-music-web" --format "{{.ID}}" | xargs -r docker rm -f || true
          
          # Find and kill processes on port 31415
          echo "Checking for processes on port 31415..."
          netstat -tlnp 2>/dev/null | grep ':31415 ' || echo "No processes found on port 31415"
          
          # Kill any processes using port 31415
          netstat -tlnp 2>/dev/null | grep ':31415 ' | awk '{print $7}' | cut -d'/' -f1 | xargs -r kill -9 || true
          
          # Wait and verify port is free
          sleep 3
          if netstat -tln 2>/dev/null | grep -q ':31415 '; then
            echo "‚ö†Ô∏è  Port 31415 still in use, attempting to force free it..."
            # More aggressive cleanup if needed
            docker ps -q | xargs -r docker stop || true
            sleep 2
          else
            echo "‚úÖ Port 31415 is free"
          fi

      - name: üî® Build Docker image
        if: steps.changes.outputs.src == 'true'
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "=== Build Phase ==="
          echo "Building Docker image with buildx..."
          docker buildx build \
            --load \
            --cache-from=type=local,src=./.buildcache \
            --cache-to=type=local,dest=./.buildcache,mode=max \
            -t interactive-music-web . || {
              echo "‚ùå Docker build failed"
              exit 1
            }
          echo "‚úÖ Docker build completed successfully"

      - name: üöÄ Start new container
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Deploy Phase ==="
          echo "Starting new container from built image..."
          docker run -d --name interactive-music-web \
            --restart unless-stopped \
            -p 31415:3000 \
            interactive-music-web || {
              echo "‚ùå Container start failed"
              docker logs interactive-music-web || true
              exit 1
            }
          echo "‚úÖ Container started successfully"
          
          # Verify container is running
          sleep 2
          if docker ps | grep -q interactive-music-web; then
            echo "‚úÖ Container is running and healthy"
            docker ps | grep interactive-music-web
          else
            echo "‚ùå Container failed to start properly"
            docker logs interactive-music-web || true
            exit 1
          fi
