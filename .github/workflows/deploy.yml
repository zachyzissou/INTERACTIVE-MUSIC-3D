name: CI/CD - interactive-music-3d-unraid

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, interactive-music-3d]
    timeout-minutes: 30

    env:
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - '**/*'
              - '!docs/**'
              - '!README.md'

      - name: üîÑ Restore Next.js cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: üîß Set up Node.js
        if: steps.changes.outputs.src == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Cache npm
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: üì¶ Install dependencies
        if: steps.changes.outputs.src == 'true'
        run: npm ci

      - name: üîé Type-check, lint & build
        if: steps.changes.outputs.src == 'true'
        run: npx tsc --noEmit && npm run lint && npm run build

      - name: üõ† Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: üßπ Clean up existing containers and processes
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Cleanup Phase ==="
          
          # Nuclear cleanup - stop ALL containers first
          echo "Stopping all running containers..."
          docker ps -q | xargs -r docker stop || true
          
          # Remove all containers with our name
          docker ps -a --filter "name=interactive-music-web" --format "{{.ID}}" | xargs -r docker rm -f || true
          
          # Remove containers by image name too
          docker ps -a --filter "ancestor=interactive-music-web" --format "{{.ID}}" | xargs -r docker rm -f || true
          
          # Remove orphaned containers
          docker container prune -f || true
          
          # Check multiple ports (31415 and 3000) for conflicts
          echo "Checking for port conflicts..."
          for port in 31415 3000; do
            if netstat -tln 2>/dev/null | grep -q ":$port "; then
              echo "‚ö†Ô∏è  Port $port is in use"
              # Try to find and kill the process
              pid=$(netstat -tlnp 2>/dev/null | grep ":$port " | awk '{print $7}' | cut -d'/' -f1 | head -1)
              if [ ! -z "$pid" ] && [ "$pid" != "-" ]; then
                echo "Killing process $pid on port $port"
                kill -9 "$pid" || true
              fi
            else
              echo "‚úÖ Port $port is free"
            fi
          done
          
          # Wait for ports to be released
          sleep 5
          
          # Final verification
          if netstat -tln 2>/dev/null | grep -q ':31415 '; then
            echo "‚ùå Port 31415 still occupied, using alternative port 31416"
            echo "ALTERNATIVE_PORT=31416" >> $GITHUB_ENV
          else
            echo "‚úÖ Port 31415 is available"
            echo "ALTERNATIVE_PORT=31415" >> $GITHUB_ENV
          fi

      - name: üî® Build Docker image
        if: steps.changes.outputs.src == 'true'
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "=== Build Phase ==="
          echo "Building Docker image with buildx..."
          docker buildx build \
            --load \
            --cache-from=type=local,src=./.buildcache \
            --cache-to=type=local,dest=./.buildcache,mode=max \
            -t interactive-music-web . || {
              echo "‚ùå Docker build failed"
              exit 1
            }
          echo "‚úÖ Docker build completed successfully"

      - name: üöÄ Start new container
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Deploy Phase ==="
          echo "Starting new container on port ${ALTERNATIVE_PORT}..."
          docker run -d --name interactive-music-web \
            --restart unless-stopped \
            -p ${ALTERNATIVE_PORT}:3000 \
            interactive-music-web || {
              echo "‚ùå Container start failed"
              docker logs interactive-music-web || true
              exit 1
            }
          echo "‚úÖ Container started successfully on port ${ALTERNATIVE_PORT}"
          
          # Verify container is running
          sleep 3
          if docker ps | grep -q interactive-music-web; then
            echo "‚úÖ Container is running and healthy"
            docker ps | grep interactive-music-web
            echo "üåê Application should be accessible at: http://localhost:${ALTERNATIVE_PORT}"
          else
            echo "‚ùå Container failed to start properly"
            docker logs interactive-music-web || true
            exit 1
          fi
          
          # Test if the application is responding
          sleep 5
          if curl -f http://localhost:${ALTERNATIVE_PORT} >/dev/null 2>&1; then
            echo "‚úÖ Application is responding on port ${ALTERNATIVE_PORT}"
          else
            echo "‚ö†Ô∏è  Application may still be starting up on port ${ALTERNATIVE_PORT}"
          fi
