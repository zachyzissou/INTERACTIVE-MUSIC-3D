name: CI/CD - interactive-music-3d-unraid

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, interactive-music-3d]
    timeout-minutes: 30

    env:
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: üßæ Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - '**/*'
              - '!docs/**'
              - '!README.md'

      - name: üßπ Early cleanup - Remove old container first
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Early Container Removal ==="
          echo "Removing old container before any other operations..."
          
          # Stop and remove old container immediately
          docker stop interactive-music-web 2>/dev/null || echo "No container to stop"
          docker rm -f interactive-music-web 2>/dev/null || echo "No container to remove"
          
          # Clean up any orphaned containers with our name
          docker ps -a --filter "name=interactive-music-web" --format "{{.ID}}" | xargs -r docker rm -f 2>/dev/null || echo "No orphaned containers"
          
          # Clean up Docker system to release port bindings
          echo "Cleaning up Docker system..."
          docker system prune -f 2>/dev/null || true
          
          # Wait longer for Docker internal cleanup
          sleep 5
          echo "‚úÖ Early cleanup completed"

      - name: üîÑ Restore Next.js cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: üîß Set up Node.js
        if: steps.changes.outputs.src == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: üì¶ Cache npm
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: üì¶ Install dependencies
        if: steps.changes.outputs.src == 'true'
        run: npm ci

      - name: üîé Type-check, lint & build
        if: steps.changes.outputs.src == 'true'
        run: npx tsc --noEmit && npm run lint && npm run build

      - name: üõ† Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: üîç Check port availability
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Port Check Phase ==="
          
          # Comprehensive port check including Docker state
          echo "Checking port availability..."
          
          # Try to find a free port dynamically
          for port in 31415 31416 31417 31418; do
            if ! ss -tln 2>/dev/null | grep -q ":$port "; then
              # Double-check with Docker by attempting a quick test bind
              if docker run --rm -p $port:80 --name test-port-$port alpine:latest echo "Port test" >/dev/null 2>&1; then
                echo "‚úÖ Port $port is available and Docker can bind to it"
                echo "ALTERNATIVE_PORT=$port" >> $GITHUB_ENV
                break
              else
                echo "‚ö†Ô∏è  Port $port appears free but Docker cannot bind to it"
              fi
            else
              echo "‚ùå Port $port is occupied by system process"
            fi
          done
          
          # Fallback to high port if all low ports fail
          if [ -z "$ALTERNATIVE_PORT" ]; then
            echo "Using fallback high port 32415"
            echo "ALTERNATIVE_PORT=32415" >> $GITHUB_ENV
          fi
          
          echo "Will use port: ${ALTERNATIVE_PORT:-32415}"

      - name: üî® Build Docker image
        if: steps.changes.outputs.src == 'true'
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "=== Optimized Build Phase ==="
          echo "Building Docker image with aggressive caching..."
          docker buildx build \
            --load \
            --target=runner \
            --cache-from=type=local,src=./.buildcache \
            --cache-to=type=local,dest=./.buildcache,mode=max \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t interactive-music-web . || {
              echo "‚ùå Docker build failed"
              exit 1
            }
          echo "‚úÖ Docker build completed successfully"

      - name: üöÄ Start new container
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Deploy Phase ==="
          echo "Starting new container on port ${ALTERNATIVE_PORT}..."
          
          # Final check before starting container
          if ss -tln 2>/dev/null | grep -q ":${ALTERNATIVE_PORT} "; then
            echo "‚ùå Port ${ALTERNATIVE_PORT} is still occupied, cannot start container"
            echo "Available ports:"
            ss -tln 2>/dev/null | grep ":314" || echo "No similar ports found"
            exit 1
          fi
          
          docker run -d --name interactive-music-web \
            --restart unless-stopped \
            -p ${ALTERNATIVE_PORT}:3000 \
            interactive-music-web || {
              echo "‚ùå Container start failed"
              echo "Port status:"
              ss -tln 2>/dev/null | grep ":${ALTERNATIVE_PORT}" || echo "Port not bound"
              docker logs interactive-music-web 2>/dev/null || true
              exit 1
            }
          echo "‚úÖ Container started successfully on port ${ALTERNATIVE_PORT}"
          
          # Verify container is running (reduced wait time)
          sleep 2
          if docker ps | grep -q interactive-music-web; then
            echo "‚úÖ Container is running and healthy"
            docker ps | grep interactive-music-web
            echo "üåê Application should be accessible at: http://localhost:${ALTERNATIVE_PORT}"
          else
            echo "‚ùå Container failed to start properly"
            docker logs interactive-music-web || true
            exit 1
          fi
          
          # Quick application response test
          echo "Testing application responsiveness..."
          for i in {1..4}; do
            if curl -f --max-time 3 http://localhost:${ALTERNATIVE_PORT} >/dev/null 2>&1; then
              echo "‚úÖ Application is responding on port ${ALTERNATIVE_PORT}"
              break
            fi
            if [ $i -eq 4 ]; then
              echo "‚ö†Ô∏è  Application may still be starting up on port ${ALTERNATIVE_PORT}"
            else
              sleep 3
            fi
          done
