name: CI/CD - interactive-music-3d-unraid

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: [self-hosted, interactive-music-3d]
    timeout-minutes: 30

    env:
      NEXT_TELEMETRY_DISABLED: 1

    steps:
      - name: 🧾 Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine changed paths
        id: changes
        uses: dorny/paths-filter@v3
        with:
          filters: |
            src:
              - '**/*'
              - '!docs/**'
              - '!README.md'

      - name: 🔄 Restore Next.js cache
        uses: actions/cache@v3
        with:
          path: .next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-nextjs-

      - name: 🔧 Set up Node.js
        if: steps.changes.outputs.src == 'true'
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: 📦 Cache npm
        if: steps.changes.outputs.src == 'true'
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        if: steps.changes.outputs.src == 'true'
        run: npm ci

      - name: 🔎 Type-check, lint & build
        if: steps.changes.outputs.src == 'true'
        run: npx tsc --noEmit && npm run lint && npm run build

      - name: 🛠 Set up Docker Buildx
        if: steps.changes.outputs.src == 'true'
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container

      - name: 🧹 Clean up existing containers and processes
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Conservative Cleanup Phase ==="
          
          # Stop and remove our specific container with force
          echo "Stopping and removing interactive-music-web container..."
          docker stop interactive-music-web 2>/dev/null || echo "Container not running"
          docker rm -f interactive-music-web 2>/dev/null || echo "Container not found"
          
          # Also clean up any containers created from our image
          echo "Cleaning up containers from our image..."
          docker ps -a --filter "ancestor=interactive-music-web" --format "{{.ID}}" | xargs -r docker rm -f 2>/dev/null || echo "No containers from our image"
          
          # Wait for port to be released
          echo "Waiting for port to be released..."
          sleep 3
          
          # Check if port 31415 is available after cleanup
          echo "Checking port availability..."
          if netstat -tln 2>/dev/null | grep -q ':31415 '; then
            echo "⚠️  Port 31415 still occupied, using port 31416"
            echo "ALTERNATIVE_PORT=31416" >> $GITHUB_ENV
          else
            echo "✅ Port 31415 is available"
            echo "ALTERNATIVE_PORT=31415" >> $GITHUB_ENV
          fi
          
          echo "Cleanup completed successfully"

      - name: 🔨 Build Docker image
        if: steps.changes.outputs.src == 'true'
        env:
          DOCKER_BUILDKIT: 1
        run: |
          echo "=== Optimized Build Phase ==="
          echo "Building Docker image with aggressive caching..."
          docker buildx build \
            --load \
            --target=runner \
            --cache-from=type=local,src=./.buildcache \
            --cache-to=type=local,dest=./.buildcache,mode=max \
            --build-arg BUILDKIT_INLINE_CACHE=1 \
            -t interactive-music-web . || {
              echo "❌ Docker build failed"
              exit 1
            }
          echo "✅ Docker build completed successfully"

      - name: 🚀 Rolling deployment
        if: steps.changes.outputs.src == 'true'
        run: |
          echo "=== Rolling Deploy Phase ==="
          
          # Start new container with temporary name first
          echo "Starting new container (temporary)..."
          docker run -d --name interactive-music-web-new \
            --restart unless-stopped \
            -p ${ALTERNATIVE_PORT}:3000 \
            interactive-music-web || {
              echo "❌ New container start failed"
              docker logs interactive-music-web-new 2>/dev/null || true
              exit 1
            }
          
          # Quick health check (reduced wait time)
          echo "Performing quick health check..."
          sleep 2
          if ! docker ps | grep -q interactive-music-web-new; then
            echo "❌ New container failed to start"
            docker logs interactive-music-web-new 2>/dev/null || true
            docker rm -f interactive-music-web-new 2>/dev/null || true
            exit 1
          fi
          
          # Test if new container is responding (reduced timeout)
          echo "Testing new container responsiveness..."
          for i in {1..6}; do
            if curl -f --max-time 3 http://localhost:${ALTERNATIVE_PORT} >/dev/null 2>&1; then
              echo "✅ New container is responding"
              break
            fi
            if [ $i -eq 6 ]; then
              echo "⚠️  New container not responding after 18s, but proceeding with deployment"
            else
              sleep 3
            fi
          done
          
          # Rolling switch: stop old, rename new
          echo "Performing rolling switch..."
          docker stop interactive-music-web 2>/dev/null || echo "No old container to stop"
          docker rm interactive-music-web 2>/dev/null || echo "No old container to remove"
          docker rename interactive-music-web-new interactive-music-web
          
          echo "✅ Rolling deployment completed successfully"
          echo "🌐 Application accessible at: http://localhost:${ALTERNATIVE_PORT}"
